"use client"

import { useState, useEffect } from "react"
import { AuthGuard } from "@/components/ui/auth-guard"
import { DashboardLayout } from "@/components/layout/dashboard-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { BookOpen, Plus, Search, Flag, Lock, Heart } from "lucide-react"
import { getCurrentUser } from "@/lib/auth"
import { getCurrentLanguage } from "@/lib/i18n"
import type { JournalEntry } from "@/lib/types"

export default function JournalingPage() {
  const [user, setUser] = useState(getCurrentUser())
  const [language, setCurrentLanguage] = useState(getCurrentLanguage())
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([])
  const [showNewEntry, setShowNewEntry] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedPrompt, setSelectedPrompt] = useState("")

  const [newEntry, setNewEntry] = useState({
    title: "",
    content: "",
    flagForCounselor: false,
    isEncrypted: true,
  })

  useEffect(() => {
    setCurrentLanguage(getCurrentLanguage())
    loadJournalEntries()
  }, [])

  const loadJournalEntries = () => {
    const entries = JSON.parse(localStorage.getItem(`journal-${user?.id}`) || "[]")
    setJournalEntries(entries)
  }

  const saveJournalEntry = () => {
    if (!newEntry.title.trim() || !newEntry.content.trim()) {
      alert(language === "en" ? "Please fill in both title and content" : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§≠‡§∞‡•á‡§Ç")
      return
    }

    const entry: JournalEntry = {
      id: `journal-${Date.now()}`,
      userId: user?.id || "",
      title: newEntry.title,
      content: newEntry.content,
      sentiment: analyzeSentiment(newEntry.content),
      flagForCounselor: newEntry.flagForCounselor,
      isEncrypted: newEntry.isEncrypted,
      createdAt: new Date(),
    }

    const updatedEntries = [entry, ...journalEntries]
    setJournalEntries(updatedEntries)
    localStorage.setItem(`journal-${user?.id}`, JSON.stringify(updatedEntries))

    // Reset form
    setNewEntry({
      title: "",
      content: "",
      flagForCounselor: false,
      isEncrypted: true,
    })
    setShowNewEntry(false)
    setSelectedPrompt("")

    // Award points
    const currentProgress = JSON.parse(localStorage.getItem(`progress-${user?.id}`) || "{}")
    const newProgress = {
      ...currentProgress,
      totalPoints: (currentProgress.totalPoints || 0) + 15,
    }
    localStorage.setItem(`progress-${user?.id}`, JSON.stringify(newProgress))

    alert(language === "en" ? "Journal entry saved!" : "‡§ú‡§∞‡•ç‡§®‡§≤ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à!")
  }

  const analyzeSentiment = (content: string): "positive" | "neutral" | "negative" => {
    // Simple sentiment analysis - in real app, use proper NLP
    const positiveWords = ["happy", "good", "great", "amazing", "wonderful", "excited", "grateful", "blessed"]
    const negativeWords = ["sad", "bad", "terrible", "awful", "depressed", "anxious", "worried", "stressed"]

    const words = content.toLowerCase().split(/\s+/)
    const positiveCount = words.filter((word) => positiveWords.includes(word)).length
    const negativeCount = words.filter((word) => negativeWords.includes(word)).length

    if (positiveCount > negativeCount) return "positive"
    if (negativeCount > positiveCount) return "negative"
    return "neutral"
  }

  const journalPrompts = {
    en: [
      "What am I grateful for today?",
      "What challenges did I overcome this week?",
      "How do I want to grow as a person?",
      "What made me smile today?",
      "What are my goals for tomorrow?",
      "How am I taking care of my mental health?",
      "What did I learn about myself recently?",
      "What relationships am I nurturing?",
    ],
    hi: [
      "‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§ï‡§ø‡§∏ ‡§¨‡§æ‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§≠‡§æ‡§∞‡•Ä ‡§π‡•Ç‡§Ç?",
      "‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•à‡§Ç‡§®‡•á ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡§æ‡§¨‡•Ç ‡§™‡§æ‡§Ø‡§æ?",
      "‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§¨‡§¢‡§º‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      "‡§Ü‡§ú ‡§Æ‡•Å‡§ù‡•á ‡§ï‡§ø‡§∏ ‡§¨‡§æ‡§§ ‡§®‡•á ‡§Æ‡•Å‡§∏‡•ç‡§ï‡§∞‡§æ‡§Ø‡§æ?",
      "‡§ï‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
      "‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•á ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç?",
      "‡§Æ‡•à‡§Ç‡§®‡•á ‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•Ä‡§ñ‡§æ?",
      "‡§Æ‡•à‡§Ç ‡§ï‡•å‡§® ‡§∏‡•á ‡§∞‡§ø‡§∂‡•ç‡§§‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ã‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç?",
    ],
  }

  const filteredEntries = journalEntries.filter(
    (entry) =>
      entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      entry.content.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment) {
      case "positive":
        return "bg-green-100 text-green-800"
      case "negative":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getSentimentIcon = (sentiment: string) => {
    switch (sentiment) {
      case "positive":
        return "üòä"
      case "negative":
        return "üòî"
      default:
        return "üòê"
    }
  }

  return (
    <AuthGuard requiredRole="student">
      <DashboardLayout>
        <div className="space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">{language === "en" ? "Journaling" : "‡§ú‡§∞‡•ç‡§®‡§≤‡§ø‡§Ç‡§ó"}</h1>
              <p className="text-muted-foreground">
                {language === "en"
                  ? "Express your thoughts and feelings in a safe, private space"
                  : "‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§, ‡§®‡§ø‡§ú‡•Ä ‡§∏‡•ç‡§•‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"}
              </p>
            </div>

            <Button onClick={() => setShowNewEntry(true)}>
              <Plus className="h-4 w-4 mr-2" />
              {language === "en" ? "New Entry" : "‡§®‡§à ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä"}
            </Button>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-muted-foreground">{language === "en" ? "Total Entries" : "‡§ï‡•Å‡§≤ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä‡§ú"}</p>
                    <p className="text-2xl font-bold">{journalEntries.length}</p>
                  </div>
                  <BookOpen className="h-8 w-8 text-primary" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-muted-foreground">{language === "en" ? "This Month" : "‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á"}</p>
                    <p className="text-2xl font-bold">
                      {
                        journalEntries.filter(
                          (entry) =>
                            new Date(entry.createdAt).getMonth() === new Date().getMonth() &&
                            new Date(entry.createdAt).getFullYear() === new Date().getFullYear(),
                        ).length
                      }
                    </p>
                  </div>
                  <Heart className="h-8 w-8 text-red-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-muted-foreground">
                      {language === "en" ? "Flagged for Review" : "‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•ç‡§≤‡•à‡§ó ‡§ï‡§ø‡§è ‡§ó‡§è"}
                    </p>
                    <p className="text-2xl font-bold">
                      {journalEntries.filter((entry) => entry.flagForCounselor).length}
                    </p>
                  </div>
                  <Flag className="h-8 w-8 text-orange-500" />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* New Entry Form */}
          {showNewEntry && (
            <Card>
              <CardHeader>
                <CardTitle>{language === "en" ? "New Journal Entry" : "‡§®‡§à ‡§ú‡§∞‡•ç‡§®‡§≤ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä"}</CardTitle>
                <CardDescription>
                  {language === "en"
                    ? "Write about your thoughts, feelings, or experiences"
                    : "‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç, ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç"}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Guided Prompts */}
                <div className="space-y-2">
                  <Label>
                    {language === "en"
                      ? "Need inspiration? Try a guided prompt:"
                      : "‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§è‡§ï ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§ø‡§§ ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç:"}
                  </Label>
                  <Select value={selectedPrompt} onValueChange={setSelectedPrompt}>
                    <SelectTrigger>
                      <SelectValue placeholder={language === "en" ? "Choose a prompt..." : "‡§è‡§ï ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç..."} />
                    </SelectTrigger>
                    <SelectContent>
                      {journalPrompts[language].map((prompt, index) => (
                        <SelectItem key={index} value={prompt}>
                          {prompt}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="title">{language === "en" ? "Title" : "‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï"}</Label>
                  <Input
                    id="title"
                    value={newEntry.title}
                    onChange={(e) => setNewEntry({ ...newEntry, title: e.target.value })}
                    placeholder={
                      selectedPrompt ||
                      (language === "en" ? "Give your entry a title..." : "‡§Ö‡§™‡§®‡•Ä ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•ã ‡§è‡§ï ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§¶‡•á‡§Ç...")
                    }
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="content">{language === "en" ? "Content" : "‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä"}</Label>
                  <Textarea
                    id="content"
                    value={newEntry.content}
                    onChange={(e) => setNewEntry({ ...newEntry, content: e.target.value })}
                    placeholder={
                      language === "en"
                        ? "Write your thoughts here... This is your safe space."
                        : "‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§≤‡§ø‡§ñ‡•á‡§Ç... ‡§Ø‡§π ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§π‡•à‡•§"
                    }
                    className="min-h-[200px]"
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="encrypt"
                      checked={newEntry.isEncrypted}
                      onCheckedChange={(checked) => setNewEntry({ ...newEntry, isEncrypted: checked })}
                    />
                    <Label htmlFor="encrypt" className="flex items-center gap-2">
                      <Lock className="h-4 w-4" />
                      {language === "en" ? "Encrypt entry" : "‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•ã ‡§è‡§®‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç"}
                    </Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      id="flag"
                      checked={newEntry.flagForCounselor}
                      onCheckedChange={(checked) => setNewEntry({ ...newEntry, flagForCounselor: checked })}
                    />
                    <Label htmlFor="flag" className="flex items-center gap-2">
                      <Flag className="h-4 w-4" />
                      {language === "en" ? "Share with counselor" : "‡§ï‡§æ‡§â‡§Ç‡§∏‡§≤‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç"}
                    </Label>
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button onClick={saveJournalEntry} className="flex-1">
                    {language === "en" ? "Save Entry" : "‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç"}
                  </Button>
                  <Button variant="outline" onClick={() => setShowNewEntry(false)} className="bg-transparent">
                    {language === "en" ? "Cancel" : "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder={language === "en" ? "Search your entries..." : "‡§Ö‡§™‡§®‡•Ä ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä‡§ú ‡§ñ‡•ã‡§ú‡•á‡§Ç..."}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Journal Entries */}
          <div className="space-y-4">
            {filteredEntries.map((entry) => (
              <Card key={entry.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{entry.title}</CardTitle>
                    <div className="flex items-center gap-2">
                      {entry.isEncrypted && <Lock className="h-4 w-4 text-muted-foreground" />}
                      {entry.flagForCounselor && <Flag className="h-4 w-4 text-orange-500" />}
                      <Badge variant="outline" className={getSentimentColor(entry.sentiment)}>
                        {getSentimentIcon(entry.sentiment)} {entry.sentiment}
                      </Badge>
                    </div>
                  </div>
                  <CardDescription>
                    {new Date(entry.createdAt).toLocaleDateString(language === "hi" ? "hi-IN" : "en-US", {
                      weekday: "long",
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm leading-relaxed line-clamp-3">{entry.content}</p>
                </CardContent>
              </Card>
            ))}

            {filteredEntries.length === 0 && (
              <Card>
                <CardContent className="p-8 text-center">
                  <BookOpen className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">
                    {language === "en" ? "No journal entries yet" : "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ú‡§∞‡•ç‡§®‡§≤ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç"}
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    {language === "en"
                      ? "Start your journaling journey today. Writing helps process emotions and track personal growth."
                      : "‡§Ü‡§ú ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§∞‡•ç‡§®‡§≤‡§ø‡§Ç‡§ó ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§≤‡•á‡§ñ‡§® ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"}
                  </p>
                  <Button onClick={() => setShowNewEntry(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    {language === "en" ? "Write First Entry" : "‡§™‡§π‡§≤‡•Ä ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç"}
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </DashboardLayout>
    </AuthGuard>
  )
}
